/**
 * Pins used to generate events
 */
enum TBPins {
    //% block="button1"
    Button1 = <number>DAL.MICROBIT_ID_IO_P12,
    //% block="button2"
    Button2 = DAL.MICROBIT_ID_IO_P16,
    //% block="button3"
    Button3 = DAL.MICROBIT_ID_IO_P14,
    //% block="button4"
    Button4 = DAL.MICROBIT_ID_IO_P15,
    //% block="joystick1"
    Joystick1 = DAL.MICROBIT_ID_IO_P8
    //% block="joystick2"
    Joystick2 = DAL.MICROBIT_ID_IO_P10
    //% block="dial"
    Dial = DAL.MICROBIT_ID_IO_P11
}

/**
 * Button events
 */
enum TBEvents {
    released = 0,
    pressed = 1
}

/**
  * Enumeration of buttons
  */
enum TBButtons {
    //% block="button1"
    Button1 = 0,
    //% block="button2"
    Button2 = 1,
    //% block="button3"
    Button3 = 2,
    //% block="button4"
    Button4 = 3,
    ////% block="joystick1"
    //Joystick1 = 4
}

/**
  * Enumeration of joystick axes
  */
enum TBJoystick {
    //% block="x"
    X,
    //% block="y"
    Y
}

/**
 * Custom blocks
 */
//% weight=10 color=#F47442 icon="\uf11b"
namespace trianglebit
{
    
    let is_init: boolean = false;
    let handlers_pressed: Action[] = [
        () => { },
        () => { },
        () => { },
        () => { },
        () => { },
        () => { },
    ];
    let handlers_released: Action[] = [
        () => { },
        () => { },
        () => { },
        () => { },
        () => { },
        () => { },
    ];
    let last_button_states: number = 0;
    
    /**
      * Registers event code
      */
    //% weight=100
    //% blockId=tb_onevent 
    //% block="When touch pad %button| at pin %p| is %event"
    //% button.fieldEditor="gridpicker" button.fieldOptions.columns=5
    //% event.fieldEditor="gridpicker" event.fieldOptions.columns=2
    //% subcategory=Inputs
    //% group=Inputs
    export function onEvent(button: TBButtons, event: TBEvents, handler: Action, p: DigitalPin)
    {
        init();
        switch (event) {
            case TBEvents.released:
                handlers_released[button] = handler;
                break;
            case TBEvents.pressed:
                handlers_pressed[button] = handler;
                break;
        }
    }
    
    function init(): void {
        return;
        //if (is_init) return;
        //is_init = true;

        //control.inBackground(() => {
        //    while (true) {
        //        poll();
        //        basic.pause(10);
        //    }    
        //})
    }

    function poll() {
        if (smbus.readByte(ADDR, REG.MAIN_CONTROL) & 0b1) {
            smbus.writeByte(ADDR, REG.MAIN_CONTROL, 0x00);

            let button_states = smbus.readByte(ADDR, REG.INPUT_STATUS);
            let changed = button_states ^ last_button_states;
            last_button_states = button_states;
            for (let x = 0; x < 6; x++){
                let mask = 0b1 << x;
                if (changed & mask) {
                    triggerHandler(x, (button_states & mask) ? TBEvents.pressed : TBEvents.released);
                }
            }
        }    
    }

    function triggerHandler(button: TBButtons, event: TBEvents) {
        switch (event) {
            case TBEvents.released:
                handlers_released[button]();
                break;
            case TBEvents.pressed:
                handlers_pressed[button]();
                break;
        }
    }
}
    
    /**
      * Read dial
      *
      */
    //% blockId="trianglebit_read_dial" block="dial"
    //% weight=90
    //% subcategory=Inputs
    //% group=Inputs
    export function readDial( ): number
    {
        //return pins.analogReadPin(AnalogPin.P0);          //need to know what pins specifically are going to be used
    }

    
    /**
      * Read joystick values
      *
      * @param axis Axis to read
      */
    //% blockId="trianglebit_read_joystick" block="joystick %axis"
    //% weight=90
    //% subcategory=Inputs
    //% group=Inputs
    export function readJoystick(axis: TBJoystick): number
    {
        //if (axis == TBJoystick.X)
        //    return pins.analogReadPin(AnalogPin.P1);      //need to know what pins specifically are going to be used
        //else
        //    return pins.analogReadPin(AnalogPin.P2);      //same here
    }

    /**
      *	Send string through BLE
      */
    //% block
    //% subcategory=Inputs
    //% group=Inputs
    //% text.defl="enter string"
    export function sendstr(text: string){
    //send string
    }

    //% block
    //% subcategory=Inputs
    //% group=Inputs
    export function testing()
    {
    uBit.display.scroll("HELLOWORLD");
    }

}
